<Window x:Class="RegexTester.Windows.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:data="clr-namespace:RegexTester.Data"
        xmlns:command="clr-namespace:RegexTester.Commands"
        xmlns:converter="clr-namespace:RegexTester.Helpers.Converters"
        Title=".NET Regular Expression Tester" Icon="pack://application:,,,/RegexTester.ico"
        Width="1280" Height="720" MinWidth="800" MinHeight="600" WindowStartupLocation="CenterScreen"
        AllowDrop="True" PreviewDragOver="MainWindow_PreviewDragOver" Drop="MainWindow_Drop"
        Loaded="MainWindow_Loaded" Closing="MainWindow_Closing">

    <Window.InputBindings>
        <KeyBinding Gesture="Ctrl+N" Command="{x:Static command:JobCommands.NewCommand}"/>
        <KeyBinding Gesture="Ctrl+O" Command="{x:Static command:JobCommands.OpenCommand}"/>
        <KeyBinding Gesture="Ctrl+S" Command="{x:Static command:JobCommands.SaveCommand}"/>
        <KeyBinding Gesture="Ctrl+Shift+S" Command="{x:Static command:JobCommands.SaveAsCommand}"/>

        <KeyBinding Gesture="Ctrl+M" Command="{x:Static command:RegexCommands.MatchCommand}"/>
        <KeyBinding Gesture="Ctrl+L" Command="{x:Static command:RegexCommands.SplitCommand}"/>
        <KeyBinding Gesture="Ctrl+P" Command="{x:Static command:RegexCommands.ReplaceCommand}"/>
        <KeyBinding Gesture="Ctrl+E" Command="{x:Static command:RegexCommands.MeasureCommand}"/>
    </Window.InputBindings>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
            <RowDefinition x:Name="ResultRowDefinition" Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <ToolBar Grid.Row="0" ToolBarTray.IsLocked="True">
            <ToolBar.Resources>
                <ResourceDictionary>
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="pack://application:,,,/Resources/Styles.Toolbar.xaml"/>
                    </ResourceDictionary.MergedDictionaries>
                </ResourceDictionary>
            </ToolBar.Resources>

            <Separator/>
            <Button Command="{x:Static command:JobCommands.NewCommand}">
                <StackPanel>
                    <Image Source="{StaticResource NewIcon}"/>
                    <AccessText Text="_New Job"/>
                </StackPanel>
            </Button>
            <Button Command="{x:Static command:JobCommands.OpenCommand}">
                <StackPanel>
                    <Image Source="{StaticResource OpenIcon}"/>
                    <AccessText Text="_Open Job"/>
                </StackPanel>
            </Button>
            <Button Command="{x:Static command:JobCommands.SaveCommand}">
                <StackPanel>
                    <Image Source="{StaticResource SaveIcon}"/>
                    <AccessText Text="_Save Job"/>
                </StackPanel>
            </Button>
            <Button Command="{x:Static command:JobCommands.SaveAsCommand}">
                <StackPanel>
                    <Image Source="{StaticResource SaveAsIcon}"/>
                    <AccessText Text="Save Job _As"/>
                </StackPanel>
            </Button>
            <Separator/>
            <Button ContextMenuService.IsEnabled="False" Click="LoadTextButton_Click">
                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="From _Document..."
                                  Command="{x:Static command:TextCommands.LoadTextCommand}"
                                  CommandParameter="Document">
                            <MenuItem.Icon>
                                <Image Source="{StaticResource DocumentIcon}"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="From _Web..."
                                  Command="{x:Static command:TextCommands.LoadTextCommand}"
                                  CommandParameter="Web">
                            <MenuItem.Icon>
                                <Image Source="{StaticResource WebIcon}"/>
                            </MenuItem.Icon>
                        </MenuItem>
                    </ContextMenu>
                </Button.ContextMenu>

                <StackPanel>
                    <Image Source="{StaticResource LoadTextIcon}"/>
                    <AccessText Text="Load _Text >"/>
                </StackPanel>
            </Button>
            <Separator/>
            <Button Command="{x:Static command:RegexCommands.MatchCommand}">
                <StackPanel>
                    <Image Source="{StaticResource MatchIcon}"/>
                    <AccessText Text="_Match"/>
                </StackPanel>
            </Button>
            <Button Command="{x:Static command:RegexCommands.SplitCommand}">
                <StackPanel>
                    <Image Source="{StaticResource SplitIcon}"/>
                    <AccessText Text="Sp_lit"/>
                </StackPanel>
            </Button>
            <Button Command="{x:Static command:RegexCommands.ReplaceCommand}">
                <StackPanel>
                    <Image Source="{StaticResource ReplaceIcon}"/>
                    <AccessText Text="Re_place"/>
                </StackPanel>
            </Button>
            <Separator/>
            <Button Command="{x:Static command:RegexCommands.MeasureCommand}">
                <StackPanel>
                    <Image Source="{StaticResource MeasureIcon}"/>
                    <AccessText Text="M_easure"/>
                </StackPanel>
            </Button>
            <Separator/>
            <Button Command="{x:Static command:GeneralCommands.AboutCommand}">
                <StackPanel>
                    <Image Source="{StaticResource AboutIcon}"/>
                    <AccessText Text="About"/>
                </StackPanel>
            </Button>
            <Separator/>
        </ToolBar>

        <Grid x:Name="InputGrid" Grid.Row="1">
            <Grid.Resources>
                <Style TargetType="Button" BasedOn="{StaticResource ModernButtonStyle}"/>
            </Grid.Resources>
            <Grid.RowDefinitions>
                <RowDefinition Height="48"/>
                <RowDefinition Height="48"/>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <GroupBox Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Header="Regular Expression">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="32"/>
                    </Grid.ColumnDefinitions>

                    <ComboBox x:Name="RegexPatternComboBox" Grid.Column="0" IsEditable="True"
                              Text="{Binding Path=Input.RegexPattern}" ItemsSource="{Binding Path=RecentRegexPatterns}"
                              DropDownOpened="PatternComboBox_DropDownOpened">
                        <ComboBox.InputBindings>
                            <KeyBinding Command="{x:Static command:RegexCommands.MatchCommand}"
                                        Key="Enter"/>
                            <KeyBinding Command="{x:Static command:RegexCommands.EditCommand}"
                                        CommandParameter="{Binding Path=Input.RegexPattern}"
                                        Key="F2"/>
                        </ComboBox.InputBindings>
                    </ComboBox>
                    <Button Grid.Column="1" Background="White"
                            Command="{x:Static command:RegexCommands.EditCommand}"
                            CommandParameter="RegexPattern">
                        <Image Source="{StaticResource EditIcon}"/>
                    </Button>
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Header="Replacement Expression">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="32"/>
                    </Grid.ColumnDefinitions>

                    <ComboBox x:Name="ReplacePatternComboBox" Grid.Column="0" IsEditable="True"
                              Text="{Binding Path=Input.ReplacePattern}" ItemsSource="{Binding Path=RecentReplacePatterns}"
                              DropDownOpened="PatternComboBox_DropDownOpened">
                        <ComboBox.InputBindings>
                            <KeyBinding Command="{x:Static command:RegexCommands.ReplaceCommand}"
                                        Key="Enter"/>
                            <KeyBinding Command="{x:Static command:RegexCommands.EditCommand}"
                                        CommandParameter="{Binding Path=Input.ReplacePattern}"
                                        Key="F2"/>
                        </ComboBox.InputBindings>
                    </ComboBox>
                    <Button Grid.Column="1" Background="White"
                            Command="{x:Static command:RegexCommands.EditCommand}"
                            CommandParameter="ReplacePattern">
                        <Image Source="{StaticResource EditIcon}"/>
                    </Button>
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="2" Grid.Column="0" Header="Text">
                <TextBox x:Name="ContentTextBox" AcceptsReturn="True" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"
                         PreviewDragOver="MainWindow_PreviewDragOver" PreviewDrop="ContentTextBox_PreviewDrop"
                         Text="{Binding Path=Input.Text, UpdateSourceTrigger=PropertyChanged}" TextChanged="ContentTextBox_TextChanged"
                         SelectionChanged="ContentTextBox_SelectionChanged"/>
            </GroupBox>
            <Expander Grid.Row="2" Grid.Column="2" ExpandDirection="Right" IsExpanded="True">
                <Expander.Style>
                    <Style TargetType="Expander">
                        <Style.Triggers>
                            <Trigger Property="IsExpanded" Value="False">
                                <Setter Property="Header">
                                    <Setter.Value>
                                        <!-- Header content need to be in Style, or Trigger cannot be activated -->
                                        <TextBlock Text="RegexOptions">
                                            <TextBlock.LayoutTransform>
                                                <RotateTransform Angle="90"/>
                                            </TextBlock.LayoutTransform>
                                        </TextBlock>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Expander.Style>

                <GroupBox Header="RegexOptions">
                    <ListBox DataContext="{Binding Path=Input}">
                        <CheckBox Content="Compiled"
                                  IsChecked="{Binding Path=Options, Converter={converter:RegexOptionsConverter}, ConverterParameter=Compiled}"/>
                        <CheckBox Content="IgnoreCase"
                                  IsChecked="{Binding Path=Options, Converter={converter:RegexOptionsConverter}, ConverterParameter=IgnoreCase}"/>
                        <CheckBox Content="Multiline"
                                  IsChecked="{Binding Path=Options, Converter={converter:RegexOptionsConverter}, ConverterParameter=Multiline}"/>
                        <CheckBox Content="ExplicitCapture"
                                  IsChecked="{Binding Path=Options, Converter={converter:RegexOptionsConverter}, ConverterParameter=ExplicitCapture}"/>
                        <CheckBox Content="Singleline"
                                  IsChecked="{Binding Path=Options, Converter={converter:RegexOptionsConverter}, ConverterParameter=Singleline}"/>
                        <CheckBox Content="IgnorePatternWhitespace"
                                  IsChecked="{Binding Path=Options, Converter={converter:RegexOptionsConverter}, ConverterParameter=IgnorePatternWhitespace}"/>
                        <CheckBox Content="RightToLeft"
                                  IsChecked="{Binding Path=Options, Converter={converter:RegexOptionsConverter}, ConverterParameter=RightToLeft}"/>
                        <CheckBox Content="ECMAScript"
                                  IsChecked="{Binding Path=Options, Converter={converter:RegexOptionsConverter}, ConverterParameter=ECMAScript}"/>
                        <CheckBox Content="CultureInvariant"
                                  IsChecked="{Binding Path=Options, Converter={converter:RegexOptionsConverter}, ConverterParameter=CultureInvariant}"/>
                    </ListBox>
                </GroupBox>
            </Expander>
        </Grid>

        <GridSplitter Grid.Row="2" DragCompleted="ResultGridSplitter_DragCompleted"
                          HorizontalAlignment="Stretch" VerticalAlignment="Center" Height="3">
            <GridSplitter.Style>
                <Style TargetType="GridSplitter">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsExpanded, ElementName=ResultExpander}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </GridSplitter.Style>
        </GridSplitter>

        <Expander x:Name="ResultExpander" Grid.Row="3" Header="Result" FocusManager.IsFocusScope="True"
                  IsExpanded="{Binding Path=Result.IsAvailable, Mode=OneWay}"
                  Expanded="ResultExpander_Expanded" Collapsed="ResultExpander_Collapsed">
            <TreeView x:Name="ResultTreeView" ItemsSource="{Binding Path=Result.Results}" MinHeight="150"
                      SelectedItemChanged="ResultTreeView_SelectedItemChanged">
                <TreeView.Resources>
                    <HierarchicalDataTemplate DataType="{x:Type data:RegexMatch}" ItemsSource="{Binding Path=Children}">
                        <TextBlock>
                            <TextBlock Text="{Binding Path=Value}"/> at index <TextBlock Text="{Binding Path=Index}"/> (<TextBlock Text="{Binding Path=Children.Count}"/>)
                        </TextBlock>
                    </HierarchicalDataTemplate>
                </TreeView.Resources>
                <TreeView.ContextMenu>
                    <!-- ContextMenu has its own Visual Tree. Use PlacementTarget property to work around -->
                    <ContextMenu DataContext="{Binding Path=PlacementTarget, RelativeSource={RelativeSource Self}}">
                        <MenuItem Header="_Copy Value"
                                  Command="{x:Static command:ResultCommands.CopyValueCommand}"
                                  CommandParameter="{Binding Path=SelectedItem}"/>
                    </ContextMenu>
                </TreeView.ContextMenu>
            </TreeView>
        </Expander>

        <StatusBar Grid.Row="4" Background="White" DataContext="{Binding Path=Result}">
            <StatusBar.Resources>
                <ResourceDictionary>
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="pack://application:,,,/Resources/Styles.StatusBar.xaml"/>
                    </ResourceDictionary.MergedDictionaries>
                </ResourceDictionary>
            </StatusBar.Resources>
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>

            <Separator Grid.Column="0" Visibility="{Binding Path=IsAvailable, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <StatusBarItem Grid.Column="1" Visibility="{Binding Path=IsAvailable, Converter={StaticResource BooleanToVisibilityConverter}}">
                <TextBlock>
                    <TextBlock Text="{Binding Path=Results.Count}"/> Result(s)
                </TextBlock>
            </StatusBarItem>
            <Separator Grid.Column="2" Visibility="{Binding Path=IsAvailable, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <StatusBarItem Grid.Column="3" Visibility="{Binding Path=IsAvailable, Converter={StaticResource BooleanToVisibilityConverter}}">
                <TextBlock>
                    Spent <TextBlock Text="{Binding Path=DurationTime, StringFormat={}{0:F2}}"/> ns (<TextBlock Text="{Binding Path=DurationTicks}"/> ticks)
                </TextBlock>
            </StatusBarItem>
            <Separator Grid.Column="4" Visibility="{Binding Path=IsAvailable, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <StatusBarItem Grid.Column="5">
                <TextBlock Visibility="{Binding Path=IsAvailable, Converter={StaticResource BooleanToVisibilityConverter}}">
                    Last Operation on <TextBlock Text="{Binding Path=TimeStamp, StringFormat={}{0:yyyy/MM/dd HH:mm:ss}}"/>
                </TextBlock>
            </StatusBarItem>
            <Separator Grid.Column="6"/>
            <StatusBarItem Grid.Column="7">
                <TextBlock>
                    Index <TextBlock x:Name="ContentCaretIndexTextBlock" Text="0"/>
                </TextBlock>
            </StatusBarItem>
            <Separator Grid.Column="8"/>
            <StatusBarItem Grid.Column="9">
                <TextBlock>
                    Line <TextBlock x:Name="ContentLineIndexTextBlock" Text="1"/> / <TextBlock x:Name="ContentLineCountTextBlock" Text="1"/>
                </TextBlock>
            </StatusBarItem>
            <Separator Grid.Column="10"/>
        </StatusBar>
    </Grid>
</Window>